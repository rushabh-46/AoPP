//
// Generated by JTB 1.3.2
//

package visitor;

import java.util.*;
import java.util.Map.Entry;
import syntaxtree.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class ClassHeirarchy<R, A> implements GJVisitor<R, A> {

  ////////////// STATIC CLASS HIERARCHY ////////////////
  // all the class definitions, types and their hierarchy are declared here
  public final HashMap<String, ClassDetails> classes = new HashMap<String, ClassDetails>();

  // list of roots - non-extended classes
  private final ArrayList<ClassDetails> roots = new ArrayList<ClassDetails>();

  //
  // Auto class visitors--probably don't need to be overridden.
  //
  public R visit(NodeList n, A argu) {
    R _ret = null;

    for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
      e.nextElement().accept(this, argu);
    }
    return _ret;
  }

  public R visit(NodeListOptional n, A argu) {
    if (n.present()) {
      R _ret = null;

      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
        e.nextElement().accept(this, argu);
      }
      return _ret;
    } else return null;
  }

  public R visit(NodeOptional n, A argu) {
    if (n.present()) return n.node.accept(this, argu); else return null;
  }

  public R visit(NodeSequence n, A argu) {
    R _ret = null;

    for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
      e.nextElement().accept(this, argu);
    }
    return _ret;
  }

  public R visit(NodeToken n, A argu) {
    return null;
  }

  //
  // User-generated visitor methods below
  //

  /**
   * f0 -> MainClass()
   * f1 -> ( TypeDeclaration() )*
   * f2 -> <EOF>
   */
  public R visit(Goal n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> "class"
   * f1 -> Identifier()
   * f2 -> "{"
   * f3 -> "public"
   * f4 -> "static"
   * f5 -> "void"
   * f6 -> "main"
   * f7 -> "("
   * f8 -> "String"
   * f9 -> "["
   * f10 -> "]"
   * f11 -> Identifier()
   * f12 -> ")"
   * f13 -> "{"
   * f14 -> ( VarDeclaration() )*
   * f15 -> ( QStatement() )*
   * f16 -> "}"
   * f17 -> "}"
   */
  @SuppressWarnings("unchecked")
  public R visit(MainClass n, A argu) {
    // Main class won't be counted as a classType
    // It has one method - main() which can be included later if required manually.
    R _ret = null;
    n.f0.accept(this, argu);
    String mainName = (String) n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    n.f4.accept(this, argu);
    n.f5.accept(this, argu);
    n.f6.accept(this, argu);
    n.f7.accept(this, argu);
    n.f8.accept(this, argu);
    n.f9.accept(this, argu);
    n.f10.accept(this, argu);
    n.f11.accept(this, argu);
    n.f12.accept(this, argu);
    n.f13.accept(this, argu);

    ClassDetails mainClass = new ClassDetails(mainName);
    mainClass.addMethod("main", "void");

    // Yet to add args[] string argument for the class.

    mainClass.setAdd(3);

    n.f14.accept(this, (A) mainClass);
    n.f15.accept(this, (A) mainClass);
    n.f16.accept(this, argu);
    n.f17.accept(this, argu);

    classes.put(mainName, mainClass);
    // classes.add(mainClass);
    return _ret;
  }

  /**
   * f0 -> ClassDeclaration()
   *       | ClassExtendsDeclaration()
   */
  public R visit(TypeDeclaration n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> "class"
   * f1 -> Identifier()
   * f2 -> "{"
   * f3 -> ( VarDeclaration() )*
   * f4 -> ( MethodDeclaration() )*
   * f5 -> "}"
   */
  @SuppressWarnings("unchecked")
  public R visit(ClassDeclaration n, A argu) {
    // will add to the classes list.
    R _ret = null;
    n.f0.accept(this, argu);
    String name = (String) n.f1.accept(this, argu);

    ClassDetails tempClass = new ClassDetails(name);

    n.f2.accept(this, argu);

    tempClass.setAdd(1); // add class field
    n.f3.accept(this, (A) tempClass);

    n.f4.accept(this, (A) tempClass);
    n.f5.accept(this, argu);

    classes.put(tempClass.getClassName(), tempClass);
    // classes.add(tempClass);
    return _ret;
  }

  /**
   * f0 -> "class"
   * f1 -> Identifier()
   * f2 -> "extends"
   * f3 -> Identifier()
   * f4 -> "{"
   * f5 -> ( VarDeclaration() )*
   * f6 -> ( MethodDeclaration() )*
   * f7 -> "}"
   */
  @SuppressWarnings("unchecked")
  public R visit(ClassExtendsDeclaration n, A argu) {
    // will add to the classes list.
    R _ret = null;
    n.f0.accept(this, argu);

    String name = (String) n.f1.accept(this, argu);
    ClassDetails tempClass = new ClassDetails(name);

    n.f2.accept(this, argu);

    String ext = (String) n.f3.accept(this, argu);
    tempClass.setExtend(ext);

    n.f4.accept(this, argu);

    tempClass.setAdd(1); // add class field
    n.f5.accept(this, (A) tempClass);
    n.f6.accept(this, (A) tempClass);
    n.f7.accept(this, argu);

    classes.put(tempClass.getClassName(), tempClass);
    // classes.add(tempClass);
    return _ret;
  }

  /**
   * f0 -> Type()
   * f1 -> Identifier()
   * f2 -> ";"
   */
  public R visit(VarDeclaration n, A argu) {
    R _ret = null;
    String typeName = (String) n.f0.accept(this, (A) argu);
    String name = (String) n.f1.accept(this, (A) argu);
    n.f2.accept(this, (A) argu);
    ClassDetails cl = (ClassDetails) argu;
    if (cl != null) {
      if (cl.getAdd() == 1) {
        cl.addField(name, typeName);
      } else if (cl.getAdd() == 3) {
        cl.currentMethod.addField(name, typeName);
      } else {
        //        System.out.println("How come VarDeclaration here?");
      }
    }
    return _ret;
  }

  /**
   * f0 -> "public"
   * f1 -> Type()
   * f2 -> Identifier()
   * f3 -> "("
   * f4 -> ( FormalParameterList() )?
   * f5 -> ")"
   * f6 -> "{"
   * f7 -> ( VarDeclaration() )*
   * f8 -> ( QStatement() )*
   * f9 -> "return"
   * f10 -> Identifier()
   * f11 -> ";"
   * f12 -> "}"
   */
  public R visit(MethodDeclaration n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    String returnType = (String) n.f1.accept(this, argu);
    String name = (String) n.f2.accept(this, argu);
    n.f3.accept(this, argu);

    ClassDetails cl = (ClassDetails) argu;
    cl.addMethod(name, returnType);
    cl.setAdd(2);
    n.f4.accept(this, argu);
    n.f5.accept(this, argu);
    n.f6.accept(this, argu);

    cl.setAdd(3);
    n.f7.accept(this, argu);
    n.f8.accept(this, argu);
    n.f9.accept(this, argu);

    String returnName = (String) n.f10.accept(this, argu);
    cl.currentMethod.setReturn(returnName);

    n.f11.accept(this, argu);
    n.f12.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> FormalParameter()
   * f1 -> ( FormalParameterRest() )*
   */
  public R visit(FormalParameterList n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> Type()
   * f1 -> Identifier()
   */
  public R visit(FormalParameter n, A argu) {
    R _ret = null;
    String typeName = (String) n.f0.accept(this, argu);
    String name = (String) n.f1.accept(this, argu);

    ClassDetails cl = (ClassDetails) argu;
    cl.currentMethod.addArgument(name, typeName);
    return _ret;
  }

  /**
   * f0 -> ","
   * f1 -> FormalParameter()
   */
  public R visit(FormalParameterRest n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> ArrayType()
   *       | BooleanType()
   *       | IntegerType()
   *       | Identifier()
   */
  public R visit(Type n, A argu) {
    R _ret = null;
    _ret = n.f0.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> "int"
   * f1 -> "["
   * f2 -> "]"
   */
  @SuppressWarnings("unchecked")
  public R visit(ArrayType n, A argu) {
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    return (R) "int[]";
  }

  /**
   * f0 -> "boolean"
   */
  @SuppressWarnings("unchecked")
  public R visit(BooleanType n, A argu) {
    n.f0.accept(this, argu);
    return (R) "Boolean";
  }

  /**
   * f0 -> "int"
   */
  @SuppressWarnings("unchecked")
  public R visit(IntegerType n, A argu) {
    n.f0.accept(this, argu);
    return (R) "int";
  }

  /**
   * f0 -> ( Query() )*
   * f1 -> Statement()
   */
  public R visit(QStatement n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> <SCOMMENT1>
   * f1 -> Identifier()
   * f2 -> "alias?"
   * f3 -> Identifier()
   * f4 -> <SCOMMENT2>
   */
  public R visit(Query n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    n.f4.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> Block()
   *       | AssignmentStatement()
   *       | ArrayAssignmentStatement()
   *       | FieldAssignmentStatement()
   *       | IfStatement()
   *       | WhileStatement()
   *       | PrintStatement()
   */
  public R visit(Statement n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> "{"
   * f1 -> ( QStatement() )*
   * f2 -> "}"
   */
  public R visit(Block n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> Identifier()
   * f1 -> "="
   * f2 -> Expression()
   * f3 -> ";"
   */
  public R visit(AssignmentStatement n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> Identifier()
   * f1 -> "["
   * f2 -> Identifier()
   * f3 -> "]"
   * f4 -> "="
   * f5 -> Identifier()
   * f6 -> ";"
   */
  public R visit(ArrayAssignmentStatement n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    n.f4.accept(this, argu);
    n.f5.accept(this, argu);
    n.f6.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> Identifier()
   * f1 -> "."
   * f2 -> Identifier()
   * f3 -> "="
   * f4 -> Identifier()
   * f5 -> ";"
   */
  public R visit(FieldAssignmentStatement n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    n.f4.accept(this, argu);
    n.f5.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> "if"
   * f1 -> "("
   * f2 -> Identifier()
   * f3 -> ")"
   * f4 -> Statement()
   * f5 -> "else"
   * f6 -> Statement()
   */
  public R visit(IfStatement n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    n.f4.accept(this, argu);
    n.f5.accept(this, argu);
    n.f6.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> "while"
   * f1 -> "("
   * f2 -> Identifier()
   * f3 -> ")"
   * f4 -> Statement()
   */
  public R visit(WhileStatement n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    n.f4.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> "System.out.println"
   * f1 -> "("
   * f2 -> Identifier()
   * f3 -> ")"
   * f4 -> ";"
   */
  public R visit(PrintStatement n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    n.f4.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> AndExpression()
   *       | CompareExpression()
   *       | PlusExpression()
   *       | MinusExpression()
   *       | TimesExpression()
   *       | ArrayLookup()
   *       | ArrayLength()
   *       | MessageSend()
   *       | FieldRead()
   *       | PrimaryExpression()
   */
  public R visit(Expression n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> Identifier()
   * f1 -> "&&"
   * f2 -> Identifier()
   */
  public R visit(AndExpression n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> Identifier()
   * f1 -> "<"
   * f2 -> Identifier()
   */
  public R visit(CompareExpression n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> Identifier()
   * f1 -> "+"
   * f2 -> Identifier()
   */
  public R visit(PlusExpression n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> Identifier()
   * f1 -> "-"
   * f2 -> Identifier()
   */
  public R visit(MinusExpression n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> Identifier()
   * f1 -> "*"
   * f2 -> Identifier()
   */
  public R visit(TimesExpression n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> Identifier()
   * f1 -> "["
   * f2 -> Identifier()
   * f3 -> "]"
   */
  public R visit(ArrayLookup n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> Identifier()
   * f1 -> "."
   * f2 -> "length"
   */
  public R visit(ArrayLength n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> Identifier()
   * f1 -> "."
   * f2 -> Identifier()
   */
  public R visit(FieldRead n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> PrimaryExpression()
   * f1 -> "."
   * f2 -> Identifier()
   * f3 -> "("
   * f4 -> ( ArgList() )?
   * f5 -> ")"
   */
  public R visit(MessageSend n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    n.f4.accept(this, argu);
    n.f5.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> Identifier()
   * f1 -> ( ArgRest() )*
   */
  public R visit(ArgList n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> ","
   * f1 -> Identifier()
   */
  public R visit(ArgRest n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> IntegerLiteral()
   *       | TrueLiteral()
   *       | FalseLiteral()
   *       | Identifier()
   *       | ThisExpression()
   *       | ArrayAllocationExpression()
   *       | AllocationExpression()
   *       | NotExpression()
   */
  public R visit(PrimaryExpression n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> <INTEGER_LITERAL>
   */
  public R visit(IntegerLiteral n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> "true"
   */
  public R visit(TrueLiteral n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> "false"
   */
  public R visit(FalseLiteral n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> <IDENTIFIER>
   */
  @SuppressWarnings("unchecked")
  public R visit(Identifier n, A argu) {
    n.f0.accept(this, argu);
    return (R) n.f0.toString();
    // return _ret;
  }

  /**
   * f0 -> "this"
   */
  public R visit(ThisExpression n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> "new"
   * f1 -> "int"
   * f2 -> "["
   * f3 -> Identifier()
   * f4 -> "]"
   */
  public R visit(ArrayAllocationExpression n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    n.f4.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> "new"
   * f1 -> Identifier()
   * f2 -> "("
   * f3 -> ")"
   */
  public R visit(AllocationExpression n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    return _ret;
  }

  /**
   * f0 -> "!"
   * f1 -> Identifier()
   */
  public R visit(NotExpression n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    return _ret;
  }

  /**
   * Invoked once in main()
   * It parses through all the class definitions,
   * updates the reference to parent and children classes
   * Basically forms the complete HIERARCHY !!
   *
   * Later calls bringFromTop()
   * This recursively gets the fields and methods of parent classes.
   */
  public void superToSub() {
    for (Entry<String, ClassDetails> e : classes.entrySet()) {
      if (e.getValue().doesExtend()) {
        ClassDetails cl = e.getValue();
        ClassDetails par = classes.get(cl.extendClassName());
        cl.parentClass = par;
        par.childrenClasses.add(cl);
      } else {
        roots.add(e.getValue());
      }
    }

    // class hierarchy is made. Now lets add superclass methods
    for (ClassDetails cl : roots) {
      ClassDetails temp = new ClassDetails("temp");
      cl.bringFromTop(temp);
    }
  }
}
